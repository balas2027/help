// TripFinder.jsx
import { useState } from "react";
import RoutingMap from "./RoutingMap";

export default function TripFinder() {
  const [from, setFrom] = useState("");
  const [to, setTo] = useState("");
  const [coords, setCoords] = useState({ from: null, to: null });
  const [searchHistory, setSearchHistory] = useState([]);
  const [distance, setDistance] = useState(null);

  function handleDistanceUpdate(newDistance) {
    setDistance(newDistance);
  }

  async function geocodePlace(place) {
    const res = await fetch(
      `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(
        place
      )}`
    );
    const data = await res.json();
    if (data.length > 0)
      return [parseFloat(data[0].lat), parseFloat(data[0].lon)];
    return null;
  }

  async function handleSearch() {
    const fromCoords = await geocodePlace(from);
    const toCoords = await geocodePlace(to);
    if (fromCoords && toCoords) {
      setCoords({ from: fromCoords, to: toCoords });

      // Add to search history (avoid duplicates)
      const newSearch = { from, to, timestamp: new Date().toLocaleString() };
      setSearchHistory((prev) => {
        // Check if this search already exists
        const exists = prev.some(
          (search) => search.from === from && search.to === to
        );
        if (!exists) {
          // Keep only last 10 searches
          return [newSearch, ...prev.slice(0, 9)];
        }
        return prev;
      });
    } else {
      alert("One of the locations could not be found.");
    }
  }

  function handleHistoryClick(historyItem) {
    setFrom(historyItem.from);
    setTo(historyItem.to);
    // Clear current coordinates first, then set new ones
    setCoords({ from: null, to: null });

    setTimeout(async () => {
      const fromCoords = await geocodePlace(historyItem.from);
      const toCoords = await geocodePlace(historyItem.to);
      if (fromCoords && toCoords) {
        setTimeout(() => {
          setCoords({ from: fromCoords, to: toCoords });
        }, 100);
      }
    }, 100);
  }

  return (
    <div style={{ minHeight: '100vh', backgroundColor: 'white', display: 'flex' }}>
      {/* Left Sidebar */}
      <div style={{ 
        width: '384px', 
        backgroundColor: 'white', 
        boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1)', 
        display: 'flex', 
        flexDirection: 'column' 
      }}>
        {/* Header */}
        <div style={{ 
          padding: '24px', 
          borderBottom: '1px solid #e5e7eb' 
        }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
            <div style={{ 
              width: '40px', 
              height: '40px', 
              backgroundColor: 'black', 
              borderRadius: '4px', 
              display: 'flex', 
              alignItems: 'center', 
              justifyContent: 'center' 
            }}>
              <span style={{ color: 'white', fontWeight: 'bold', fontSize: '18px' }}>T</span>
            </div>
            <h1 style={{ fontSize: '24px', fontWeight: 'bold', color: '#111827', margin: 0 }}>
              Trip Finder
            </h1>
          </div>
        </div>

        {/* Content Area */}
        <div style={{ flex: 1, overflowY: 'auto' }}>
          <div style={{ padding: '24px', display: 'flex', flexDirection: 'column', gap: '16px' }}>
            <h2 style={{ fontSize: '18px', fontWeight: '600', color: '#111827', marginBottom: '16px' }}>
              Find a trip
            </h2>

            <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
              {/* Pick-up location */}
              <div style={{ position: 'relative' }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                  <div style={{ 
                    width: '12px', 
                    height: '12px', 
                    backgroundColor: '#9ca3af', 
                    borderRadius: '50%' 
                  }}></div>
                  <input
                    type="text"
                    value={from}
                    onChange={(e) => setFrom(e.target.value)}
                    placeholder="Pick-up location"
                    style={{
                      flex: 1,
                      padding: '12px 16px',
                      border: '1px solid #d1d5db',
                      borderRadius: '8px',
                      color: '#111827',
                      fontSize: '16px',
                      outline: 'none'
                    }}
                    onFocus={(e) => {
                      e.target.style.borderColor = 'black';
                      e.target.style.boxShadow = '0 0 0 2px rgba(0, 0, 0, 0.1)';
                    }}
                    onBlur={(e) => {
                      e.target.style.borderColor = '#d1d5db';
                      e.target.style.boxShadow = 'none';
                    }}
                  />
                </div>
              </div>

              {/* Drop-off location */}
              <div style={{ position: 'relative' }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                  <div style={{ 
                    width: '12px', 
                    height: '12px', 
                    backgroundColor: 'black', 
                    borderRadius: '2px' 
                  }}></div>
                  <input
                    type="text"
                    value={to}
                    onChange={(e) => setTo(e.target.value)}
                    placeholder="Drop-off location"
                    style={{
                      flex: 1,
                      padding: '12px 16px',
                      border: '1px solid #d1d5db',
                      borderRadius: '8px',
                      color: '#111827',
                      fontSize: '16px',
                      outline: 'none'
                    }}
                    onFocus={(e) => {
                      e.target.style.borderColor = 'black';
                      e.target.style.boxShadow = '0 0 0 2px rgba(0, 0, 0, 0.1)';
                    }}
                    onBlur={(e) => {
                      e.target.style.borderColor = '#d1d5db';
                      e.target.style.boxShadow = 'none';
                    }}
                  />
                  <button style={{
                    width: '32px',
                    height: '32px',
                    backgroundColor: '#f3f4f6',
                    borderRadius: '50%',
                    border: 'none',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    cursor: 'pointer',
                    fontSize: '18px'
                  }}>
                    <span>+</span>
                  </button>
                </div>
              </div>

              {/* Time selector */}
              <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                <div style={{ width: '12px', height: '12px' }}></div>
                <button style={{
                  display: 'flex',
                  alignItems: 'center',
                  gap: '8px',
                  padding: '8px 16px',
                  color: '#374151',
                  backgroundColor: 'transparent',
                  border: 'none',
                  borderRadius: '8px',
                  cursor: 'pointer'
                }}>
                  <svg
                    style={{ width: '16px', height: '16px' }}
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                    />
                  </svg>
                  <span>Pick up now</span>
                  <svg
                    style={{ width: '16px', height: '16px' }}
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M19 9l-7 7-7-7"
                    />
                  </svg>
                </button>
              </div>

              {/* For me selector */}
              <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                <div style={{ width: '12px', height: '12px' }}></div>
                <button style={{
                  display: 'flex',
                  alignItems: 'center',
                  gap: '8px',
                  padding: '8px 16px',
                  color: '#374151',
                  backgroundColor: 'transparent',
                  border: 'none',
                  borderRadius: '8px',
                  cursor: 'pointer'
                }}>
                  <svg
                    style={{ width: '16px', height: '16px' }}
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                    />
                  </svg>
                  <span>For me</span>
                  <svg
                    style={{ width: '16px', height: '16px' }}
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M19 9l-7 7-7-7"
                    />
                  </svg>
                </button>
              </div>
            </div>

            <button
              onClick={handleSearch}
              style={{
                width: '100%',
                backgroundColor: '#e5e7eb',
                color: '#374151',
                fontWeight: '500',
                padding: '12px',
                borderRadius: '8px',
                border: 'none',
                cursor: 'pointer',
                marginTop: '24px',
                transition: 'background-color 0.2s'
              }}
              onMouseEnter={(e) => e.target.style.backgroundColor = '#d1d5db'}
              onMouseLeave={(e) => e.target.style.backgroundColor = '#e5e7eb'}
            >
              Search
            </button>

            {distance && (
              <>
                <div style={{
                  color: 'black',
                  fontWeight: '500',
                  backgroundColor: 'white',
                  padding: '12px 0'
                }}>
                  Distance: {distance} km
                </div>
                <div style={{
                  color: 'black',
                  fontWeight: '500',
                  backgroundColor: 'white',
                  padding: '12px 0'
                }}>
                  Price: ₹ {(distance * 10).toFixed(2)} (₹10 per km)
                </div>
              </>
            )}

            {/* Activity Button */}
            <div style={{ padding: '24px 0', borderTop: '1px solid #e5e7eb' }}>
              <button style={{
                display: 'flex',
                alignItems: 'center',
                gap: '8px',
                color: '#374151',
                backgroundColor: 'transparent',
                border: 'none',
                cursor: 'pointer'
              }}>
                <svg
                  style={{ width: '20px', height: '20px' }}
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"
                  />
                </svg>
                <span style={{ fontWeight: '500' }}>Activity</span>
              </button>
            </div>

            {/* Search History */}
            {searchHistory.length > 0 && (
              <div style={{ marginTop: '24px', display: 'flex', flexDirection: 'column', gap: '12px' }}>
                <h3 style={{ fontSize: '14px', fontWeight: '500', color: '#111827' }}>
                  Recent searches
                </h3>
                <div style={{ 
                  display: 'flex', 
                  flexDirection: 'column', 
                  gap: '8px', 
                  maxHeight: '256px', 
                  overflowY: 'auto' 
                }}>
                  {searchHistory.map((search, index) => (
                    <div
                      key={index}
                      onClick={() => handleHistoryClick(search)}
                      style={{
                        padding: '12px',
                        backgroundColor: '#f9fafb',
                        borderRadius: '8px',
                        cursor: 'pointer',
                        transition: 'background-color 0.2s'
                      }}
                      onMouseEnter={(e) => e.target.style.backgroundColor = '#f3f4f6'}
                      onMouseLeave={(e) => e.target.style.backgroundColor = '#f9fafb'}
                    >
                      <div style={{ display: 'flex', alignItems: 'center', gap: '8px', fontSize: '14px' }}>
                        <div style={{ 
                          width: '8px', 
                          height: '8px', 
                          backgroundColor: '#9ca3af', 
                          borderRadius: '50%' 
                        }}></div>
                        <span style={{ color: '#374151', flex: 1 }}>
                          {search.from}
                        </span>
                      </div>
                      <div style={{ 
                        display: 'flex', 
                        alignItems: 'center', 
                        gap: '8px', 
                        fontSize: '14px', 
                        marginTop: '4px' 
                      }}>
                        <div style={{ 
                          width: '8px', 
                          height: '8px', 
                          backgroundColor: 'black', 
                          borderRadius: '1px' 
                        }}></div>
                        <span style={{ color: '#374151', flex: 1 }}>
                          {search.to}
                        </span>
                      </div>
                      <div style={{ fontSize: '12px', color: '#6b7280', marginTop: '4px' }}>
                        {search.timestamp}
                      </div>
                    </div>
                  ))}
                </div>

                {/* Clear history button */}
                <button
                  onClick={() => setSearchHistory([])}
                  style={{
                    width: '100%',
                    fontSize: '14px',
                    color: '#6b7280',
                    backgroundColor: 'transparent',
                    border: 'none',
                    cursor: 'pointer',
                    padding: '8px'
                  }}
                >
                  Clear history
                </button>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Map Area */}
      <div style={{ flex: 1, position: 'relative' }}>
        <RoutingMap
          from={coords.from}
          to={coords.to}
          fromname={from}
          toname={to}
          handleDistanceUpdate={handleDistanceUpdate}
        />
      </div>
    </div>
  );
}
